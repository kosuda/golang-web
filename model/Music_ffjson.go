// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: model/Music.go
// DO NOT EDIT!

package model

import (
	"bytes"
)

type MusicSlice []*Music

func (mj MusicSlice) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	buf.Grow(1024)
	buf.WriteString(`[`)
	for _, value := range mj {
		err := value.MarshalJSONBuf(&buf)
		if err != nil {
			return nil, err
		}
		buf.WriteString(`,`)
	}
	buf.WriteString(`]`)
	return buf.Bytes(), nil
}

func (mj *Music) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	buf.Grow(1024)
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Music) MarshalJSONBuf(buf *bytes.Buffer) error {
	var err error
	var obj []byte
	var first bool = true
	_ = obj
	_ = err
	_ = first
	buf.WriteString(`{`)
	if first == true {
		first = false
	} else {
		buf.WriteString(`,`)
	}
	buf.WriteString(`"artist_id":`)
	ffjson_WriteJsonString(buf, mj.ArtistID)
	if first == true {
		first = false
	} else {
		buf.WriteString(`,`)
	}
	buf.WriteString(`"id":`)
	ffjson_WriteJsonString(buf, mj.ID)
	if first == true {
		first = false
	} else {
		buf.WriteString(`,`)
	}
	buf.WriteString(`"outline":`)
	ffjson_WriteJsonString(buf, mj.Outline)
	if first == true {
		first = false
	} else {
		buf.WriteString(`,`)
	}
	buf.WriteString(`"title":`)
	ffjson_WriteJsonString(buf, mj.Title)
	buf.WriteString(`}`)
	return nil
}
